// kadai01.cpp
#include <iostream>
#define CPP2_PRIME_UPPER_LIMIT 1000000 //探索する値の上限値。

/* --------------------------------------------------------------- */
/*
* is_prime
*
* 与えられた正整数 x に対して、素数かどうかを判定する
*
*/
/* -------------------------------------------------------------- */
bool is_prime(unsigned int x) {
	int flag = 0;
	//2からx-1までの数がxを割れるかチェックする。
	for (int i = 2; i<x; i++) {
		if (x%i == 0) {
			return false;	
		}
		else {
			return true;
		}
	}
}
/* --------------------------------------------------------------- */
/*
* nth_prime
*
* 与えられた正整数 a と d と n に対して、この等差数列に含まれる n 番目の
* 素数を返す。
*
* TODO: この nth_prime 関数を実装せよ。必要であれば他に関数や
* ファイルを作成せよ。
*/
/* -------------------------------------------------------------- */
int nth_prime(unsigned int a, unsigned int d, unsigned int n) {
	int num = a;
	int count = 0;//numが素数であれば1インクリメントする。
	while (num < 100000) {
		if (is_prime(num) == true) {
			count++;
		}
		num += d;
		if (count == n) {
			return num;
		}
	}
}




int main() {
	std::cout << nth_prime(179 ,10 ,203) << std::endl;
	//std::cout << nth_prime(367, 186, 151) << std::endl;
	// 以下、同様に、入出力例通りになるか確認せよ。
	return 0;
}
